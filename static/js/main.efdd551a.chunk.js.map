{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.jsx","components/Track/Track.jsx","components/TrackList/TrackList.jsx","components/SearchResults/SearchResults.jsx","components/PlayList/Playlist.jsx","components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","PlayList","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","alert","savePlayList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efdd551a.chunk.js","sourcesContent":["const clientId = process.env.REACT_APP_CLIENT_ID; // Insert client ID here.\r\nconst redirectUri = 'http://localhost:3000/'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = 'https://accounts.spotify.com/authorize?client_id=' + clientId + '&response_type=token&scope=playlist-modify-public&redirect_uri=' + redirectUri;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }));\r\n        });\r\n    },\r\n\r\n    savePlaylist(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` };\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            }).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ uris: trackUris })\r\n                });\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: ''\r\n        };\r\n\r\n        this.search = this.search.bind(this);\r\n\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({\r\n            term: event.target.value\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return(\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react'\r\nimport './Track.css';\r\n\r\n\r\nclass Track extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n    \r\n    renderAction() {\r\n            if(this.props.isRemoval) {\r\n                return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n            } else {\r\n                return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n            };\r\n        };\r\n\r\n    addTrack(event) {\r\n        // this is gonna check if the track that we want to add as an id that already exists with our current playlist. If it does, it wont be added, if not it will  and upsdate state.\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack(event){\r\n        // the onRemove is the one that is filtering the track\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n    \r\n    \r\n    render() {\r\n        return(\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        // in each object, i want to pass down the object into the component with the pop\r\n                        return <Track track={track}\r\n                                key={track.id}\r\n                                onAdd={this.props.onAdd}\r\n                                isRemoval={this.props.isRemoval}\r\n                                onRemove={this.props.onRemove}\r\n                                \r\n                                />\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\n\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} \r\n                onAdd={this.props.onAdd}\r\n                // isRemoval={false}\r\n                /> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\n\r\nclass PlayList extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Playlist\">\r\n                <input onChange={this.handleNameChange} defaultValue={'New Playlist'} />\r\n                <TrackList tracks={this.props.playlistTracks} \r\n                onRemove={this.props.onRemove}\r\n                isRemoval={true}\r\n                /> \r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// spotify:track:5YJtMNWKe55yr49cyJgxva\r\n\r\nexport default PlayList;","\nimport './App.css';\nimport React from 'react';\n\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport PlayList from '../PlayList/Playlist';\n\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    searchResults: [],\n    playlistName: 'My Playlist',\n    playlistTracks: []\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n\n    this.removeTrack = this.removeTrack.bind(this);\n\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n\n    this.savePlaylist = this.savePlaylist.bind(this);\n\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    // if our track that we are attempting to pass in is matched up to our savedTrack, it will not doing anything but if it isnt, it will be pushed\n    if(tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({playlistTracks: tracks})\n  }\n\n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n    // the filter method will take a look at everything in the array\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id); \n      \n    \n    this.setState({playlistTracks: tracks})\n\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name})\n  }\n\n  savePlaylist() {\n    // at this moment, my songs do not have uris attached to them but this map function will cycle through and place it in a new array for the uris\n    alert(\"this method is linked properly\")\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlayList(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    })\n  }\n\n  render() {\n    return (\n      <div>\n    <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n    <div className=\"App\">\n      <SearchBar onSearch={this.search}/>\n      <div className=\"App-playlist\">\n        <SearchResults searchResults={this.state.searchResults}\n        onAdd={this.addTrack}\n        />\n        <PlayList playlistName={this.state.playlistName} \n        playlistTracks={this.state.playlistTracks}\n        onRemove={this.removeTrack}\n        onNameChange={this.updatePlaylistName}\n        onSave={this.savePlaylist}\n        />\n      </div>\n    </div>\n  </div>\n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './components/App/App.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}